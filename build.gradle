plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.polzzak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.431'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // Jwt
    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // DB
    runtimeOnly("com.h2database:h2")
    implementation 'mysql:mysql-connector-java:8.0.32'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
}

jar {
    enabled = false
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    dependsOn test
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir

    doFirst {
        delete file('src/main/resources/static/docs')
    }
    doLast {
        copy {
            from file("${asciidoctor.outputDir}")
            into file("src/main/resources/static/docs")
        }
    }
}

tasks.bootJar {
    dependsOn asciidoctor
    doFirst {
        copy {
            from file("${asciidoctor.outputDir}")
            into file("build/resources/main/static/docs")
        }
    }
}
