## https://zzang9ha.tistory.com/404
name: Polzzak CI/CD

on:
  push:
    branches:
#      - master
      - develop

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching (우선 제외 후 나중에 추가)
##    - name: Gradle Caching
##      uses: actions/cache@v3
##      with:
##        path: |
##          ~/.gradle/caches
##          ~/.gradle/wrapper
##        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
##        restore-keys: |
##          ${{ runner.os }}-gradle-

    ## [DEV] create application.yml
    - name: make application.yml
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        echo "spring:" >> ./secret.yml
        echo "  datasource:" >> ./secret.yml
        echo "    url: ${{ secrets.DB_URL_DEV }}" >> ./secret.yml
        echo "    username: ${{ secrets.DB_USERNAME_DEV }}" >> ./secret.yml
        echo "    password: ${{ secrets.DB_PASSWORD_DEV }}" >> ./secret.yml
        echo "    driver-class-name: ${{ secrets.DB_DRIVER_CLASS_NAME_DEV }}" >> ./secret.yml

    ## [PROD] create application.yml
#    - name: make application.yml
#      if: contains(github.ref, 'master')
#      run: |
#        cd ./src/main/resources
#        touch ./application.yml
#        echo "spring:" >> ./application.yml
#        echo "  datasource:" >> ./application.yml
#        echo "    url: ${{ secrets.DB_URL_DEV }}" >> ./application.yml
#        echo "    username: ${{ secrets.DB_USERNAME_DEV }}" >> ./application.yml
#        echo "    password: ${{ secrets.DB_PASSWORD_DEV }}" >> ./application.yml
#        echo "    driver-class-name: ${{ secrets.DB_DRIVER_CLASS_NAME_DEV }}" >> ./application.yml
#        shell: bash
        
    ## gradle build
    - name: Build with Gradle
      run: ./gradlew clean build
## 테스트 코드 스킵 코드 -x test -x ktlintCheck -x ktlintTestSourceSetCheck -x ktlintMainSourceSetCheck -x ktlintKotlinScriptCheck

    ## docker build & push to production
#    - name: Docker build & push to prod
#      if: contains(github.ref, 'master')
#      run: |
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/polzzak-dev .
#          docker push ${{ secrets.DOCKER_REPO }}/polzzak-dev

    ## docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/polzzak-dev .
          docker push ${{ secrets.DOCKER_REPO }}/polzzak-dev

    ## deploy to production
#    - name: Deploy to prod
#      uses: appleboy/ssh-action@master
#      id: deploy-prod
#      if: contains(github.ref, 'master')
#      with:
#          host: ${{ secrets.HOST_PROD }}
#          username: ec2-user
#          key: ${{ secrets.PRIVATE_KEY }}
#          envs: GITHUB_SHA
#          script: |
#              sudo docker rm -f $(docker ps -qa)
#              sudo docker pull ${{ secrets.DOCKER_REPO }}/dotoriham-prod
#              docker-compose up -d
#              docker image prune -f

    ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/polzzak-dev
            docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/polzzak-dev
            docker image prune -f
#            docker-compose up -d

  ## time
#  current-time:
#    needs: CI-CD
#    runs-on: ubuntu-latest
#    steps:
#      - name: Get Current Time
#        uses: 1466587594/get-current-time@v2
#        id: current-time
#        with:
#          format: YYYY-MM-DDTHH:mm:ss
#          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가
#
#      - name: Print Current Time
#        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
#        shell: bash
#
#  ## slack
#  action-slack:
#    needs: CI-CD
#    runs-on: ubuntu-latest
#    steps:
#        - name: Slack Alarm
#          uses: 8398a7/action-slack@v3
#          with:
#              status: ${{ job.status }}
#              author_name: GitHub-Actions CI/CD
#              fields: repo,message,commit,author,ref,job,took
#          env:
#              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#          if: always() # Pick up events even if the job fails or is canceled.
